GitHub Projects criterion needs to be met:
1) Popularity score of at least 100 stars
2) Modified by at least 50 contributors
3) Larger than 100 Mb (medium) or 1 Gb (large)
4) At least 500 code files

Dataset collection:
1) https://www.githubarchive.org/
2) https://cloud.google.com/bigquery/
3) https://developers.google.com/bigquery/

1. Classification of commit, committer, author, date, message etc. (git log) (read the introduction from this paper: http://ieeexplore.ieee.org/document/7816475/)
2. Finding reason of the code changes (git diff)
3. Association rule mining for finding the pattern of code changes (git diff)
4. Comparing number of commit, number of committer, number of author, number of changes (add_loc, del_loc), date etc. between projects with the same programming language. (git log)
5. Finding the most popular programming language in some projects in GitHub repositories by comparing the number of committer, number of author, the starting date of commit etc. (git log, git diff)
6. TDA Implementation in mining software repositories (git log)
7. Project version comparison (git tag)
8. How frequent are popular Android apps updated? (https://link.springer.com/article/10.1007/s10664-015-9388-2)
9. Comparing the entropy of changes after change of code (https://goo.gl/pYnwJr)
10. Predicting the delay of bug fixing or something else (http://rdcu.be/teAy)
11. Large-scale GitHub study, containing variables (http://rdcu.be/twSy)
12. Classification of author's action, i.e update, delete, add, move etc. in GitHub (git log)
13. Literature review, searching papers from some particular journals / proceedings related with software mining repositories. (http://romisatriawahono.net/publications/2016/wahono-slr-may2016.pdf), (http://journal.ilmukomputer.org/index.php/jse/article/view/47)
14. Classification of changes in a project (libraries, functions, comments, loops etc.) (http://ieeexplore.ieee.org/document/7816466/)
15. Systematic mapping study, to visualize the research trends discovery. (https://doi.org/10.1016/j.infsof.2015.03.007)
16. Classification of deleted lines as buggylines, function, loop, conditional statement etc. ("Prevalence of Confusing Code in Software Projects" Link: https://atomsofconfusion.com/papers/atom-finder-msr-2018.pdf)
17. Statistic study (e.g. counting the number of added / deleted lines divided by period, example by year 2010, 2011 etc.)
18. Finding the version of a project that the most used by developers.